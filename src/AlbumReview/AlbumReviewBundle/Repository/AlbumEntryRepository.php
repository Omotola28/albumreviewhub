<?php

namespace AlbumReview\AlbumReviewBundle\Repository;

/**
 * AlbumEntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlbumEntryRepository extends \Doctrine\ORM\EntityRepository
{
    public function getLatest($limit, $offset)
    {
        $queryBuilder = $this->createQueryBuilder('entry');
        $queryBuilder->orderBy('entry.timestamp', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getSearchResults($query)
    {
        //Select album from album table where title or artist is
        //like the query string entered.
        $queryBuilder = $this->createQueryBuilder('album');
        $queryBuilder->select('album')
            ->where('album.title LIKE :string')
            ->orWhere('album.artist LIKE :string')
            ->orWhere('album.reviewer LIKE :string')
            ->setParameter('string', '%'.$query.'%');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getAlbumImage($id)
    {
        $queryBuilder = $this->createQueryBuilder('album');
        $queryBuilder->select('image')
            ->setParameter(':id', $id)
            ->where('album.id = :id');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function countAlbumEntryByUser($id)
    {
        $queryBuilder = $this->createQueryBuilder('album');
        $totalAlbums = $queryBuilder->select('count(album.id)')
            ->setParameter(':id', $id)
            ->where('album.author = :id' )
        ->getQuery()
        ->getSingleScalarResult();

        return $totalAlbums;
    }

    public function getAlbumEntryByUser($id)
    {
        $queryBuilder = $this->createQueryBuilder('album');
        $queryBuilder->select('album')
            ->setParameter(':id', $id)
            ->where('album.author = :id' );
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }
}

<?php

namespace AlbumReview\AlbumReviewBundle\Repository;

/**
 * ReviewEntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReviewEntryRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAssociatedReviews($album_id)
    {
        //Get all the reviews that are associated with the album id.
        //Get reviews from review.entry where album_id is equal to the
        //the current album
        $queryBuilder = $this->createQueryBuilder('entry');
        $queryBuilder->orderBy('entry.id', 'DESC')
            ->setParameter(':albumID', $album_id)
            ->where('entry.album = :albumID');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getAlbumReviews($albumId){
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review')
            ->setParameter(':albumid', $albumId)
            ->where('review.album = :albumid');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getAlbumSpecificReview($albumId, $reviewId){
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review')
            ->setParameter(':albumid', $albumId)
            ->setParameter(':reviewId', $reviewId)
            ->where('review.id = :reviewId')
            ->andWhere('review.album = :albumid');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getUserSpecificAblumReviews($userId, $albumId){
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review')
            ->setParameter(':userId', $userId)
            ->setParameter(':albumId', $albumId)
            ->where('review.user = :userId')
            ->andWhere('review.album = :albumId');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function checkForReviewInAlbum($reviewId, $albumId){
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review')
            ->setParameter(':albumId', $albumId)
            ->setParameter(':reviewId', $reviewId)
            ->where('review.id = :reviewId')
            ->andWhere('review.album = :albumId');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getUserAlbumSpecificReview($reviewId, $albumId, $userId){
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review')
            ->setParameter(':albumId', $albumId)
            ->setParameter(':reviewId', $reviewId)
            ->setParameter(':userId', $userId)
            ->where('review.id = :reviewId')
            ->andWhere('review.album = :albumId')
            ->andWhere('review.user = :userId');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }
}
